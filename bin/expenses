#!/usr/bin/env ruby

require 'yaml'

begin
  data = YAML.load_file(ARGV.first)
rescue TypeError, Errno::ENOENT
  abort "Usage: #$0 2018/25.expenses"
end

class Cost
  def self.parse(line)
    amount, currency = line.split(' ')
    self.new(amount.to_f, currency)
  end

  attr_reader :amount, :currency
  def initialize(amount, currency)
    @amount, @currency = amount, currency
  end

  def to_s
    "#{@amount} #{@currency}"
  end

  alias_method :inspect, :to_s
end

class CostList
  attr_reader :list
  def initialize(list = Array.new)
    @list = list
  end

  def sum
    @list.group_by(&:currency).each_with_object(Hash.new) do |(currency, expenses), currencies|
      currencies[currency] = expenses.sum(&:amount)
    end
  end

  def +(other_list)
    self.class.new(@list + other_list.list)
  end
end

expenses_per_day = data.each_with_object(Hash.new) do |(day, items), result|
  result[day] = CostList.new(items.map(&:values).flat_map do |price_and_currency, amounts|
    Cost.parse(price_and_currency)
  end)
end

expenses_per_day_II = expenses_per_day.each_with_object(Hash.new) do |(day, cost_list), result|
  result[day] = cost_list.sum
end

overall_expenses = expenses_per_day.reduce(CostList.new) do |result, (day, cost_list)|
  cost_list + result
end

puts "Expenses per day: #{expenses_per_day_II.inspect}"
puts "Overall expenses: #{overall_expenses.sum.inspect}"
